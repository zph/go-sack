#!/bin/bash

readonly VERSION="v0.3.1"
readonly BASE_URL="https://github.com/zph/go-sack/releases/download/$VERSION/"

platform_release(){
 echo "${BASE_URL}${1}"
}

get_binary(){
  wget -O $bin_path $(platform_release $1)
}

get_and_chmod(){
  $(get_binary $1) && chmod +x $bin_path
}

check_for_bin_dir(){
  if [[ ! -d $1 ]];then
    echo "$1 not found"
    echo "Please manually install sack or \`mkdir $1\` and try again."
    exit 1
  fi
}

verify_in_path(){
  local dir="$1"
  if [[ ! $PATH =~ $dir ]];then
    echo "$1 not found in \$PATH"
    echo "Please manually add the following to ~/.bashrc or ~/.zshrc:"
    echo "export PATH=\"\$HOME/bin:\$PATH\""
    echo "And rerun script."
    exit 1
  fi
}

already_present(){
  if [[ -x `which sack` ]];then
    local ver=$(sack -v | egrep -o '\d+\.\d+\.\d+')
    if [[ "v${ver}" == $VERSION ]];then
      echo "Requested ver: ${VERSION}"
      echo "Current   ver: v${ver}"
      echo "Already have up-to-date binary."
      exit 0
    fi
  fi
}


main(){
  bin_dir="${HOME}/bin"
  bin_path="${bin_dir}/sack"

  check_for_bin_dir $bin_dir
  verify_in_path $bin_dir
  already_present

  echo "Installing sack"
  echo "Source: $BASE_URL"
  echo "Output: $bin_path"

  unamev=$(uname -a)

  if [[ $unamev =~ "Darwin" ]];then
    get_and_chmod "sack"
  elif [[ $unamev =~ "FreeBSD" ]]; then
    get_and_chmod "sack.freebsd_amd64"
  else
    get_and_chmod "sack.linux_amd64"
  fi

  if [[ $? == 0 ]];then
    echo "Successfully installed"
  else
    echo "Install failed please report an issue:\n"
    echo "  https://github.com/zph/go-sack/issues"
  fi
}

main
